'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // base controller class


var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _relite = require('relite');

var _jsCookie = require('js-cookie');

var _jsCookie2 = _interopRequireDefault(_jsCookie);

var _querystring = require('querystring');

var _querystring2 = _interopRequireDefault(_querystring);

var _util = require('../util');

var _util2 = _interopRequireDefault(_util);

var _Root = require('../component/Root');

var _Root2 = _interopRequireDefault(_Root);

var _ControllerProxy = require('../component/ControllerProxy');

var _ControllerProxy2 = _interopRequireDefault(_ControllerProxy);

var _ViewManager = require('../component/ViewManager');

var _ViewManager2 = _interopRequireDefault(_ViewManager);

var _actions = require('./actions');

var shareActions = _interopRequireWildcard(_actions);

var _attachDevToolsIfPossible = require('./attachDevToolsIfPossible');

var _attachDevToolsIfPossible2 = _interopRequireDefault(_attachDevToolsIfPossible);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var EmptyView = function EmptyView() {
	return false;
};
var uid = 0; // seed of controller id
/**
 * 绑定 Store 到 View
 * 提供 Controller 的生命周期钩子
 * 组装事件处理器 Event Handlers
 * 提供 fetch 方法
 */

var Controller = function () {
	function Controller(location, context) {
		_classCallCheck(this, Controller);

		this.View = EmptyView;

		this.meta = {
			id: uid++,
			isDestroyed: false,
			hadMounted: false, // change by ControllerProxy
			unsubscribeList: []
			/**
    * 将 location.key 赋值给 this.meta 并在 location 里删除
      * 避免 SSR 时，因为 initialState 里总有 locaiton.key 这个随机字符串
      * 而导致服务端的 Etag 不断变化，无法 304 。
    */
		};if (location) {
			this.meta.key = location.key;
			delete location.key;
		}
		this.location = location;
		this.context = context;
		this.handlers = {};
	}
	// 绑定 handler 的 this 值为 controller 实例


	_createClass(Controller, [{
		key: 'combineHandlers',
		value: function combineHandlers(source) {
			var _this = this;

			var handlers = this.handlers;

			Object.keys(source).forEach(function (key) {
				var value = source[key];
				if (key.startsWith('handle') && typeof value === 'function') {
					handlers[key] = value.bind(_this);
				}
			});
		}
		// 补 basename 前缀

	}, {
		key: 'prependBasename',
		value: function prependBasename(pathname) {
			if (_util2.default.isAbsoluteUrl(pathname)) {
				return pathname;
			}
			var basename = this.context.basename;

			return basename + pathname;
		}
		// 补 publicPath 前缀

	}, {
		key: 'prependPublicPath',
		value: function prependPublicPath(pathname) {
			if (_util2.default.isAbsoluteUrl(pathname)) {
				return pathname;
			}
			var publicPath = this.context.publicPath;

			return publicPath + pathname;
		}

		// 处理 url 的相对路径或 mock 地址问题

	}, {
		key: 'prependRestapi',
		value: function prependRestapi(url) {
			var context = this.context;

			/**
    * 如果已经是绝对路径
    * 在服务端直接返回 url
    * 在客户端裁剪掉 http: 使之以 // 开头
    * 让浏览器自动匹配协议，支持 Https
    */

			if (_util2.default.isAbsoluteUrl(url)) {
				if (context.isClient && url.startsWith('http:')) {
					url = url.replace('http:', '');
				}
				return url;
			}

			// 对 mock 的请求进行另一种拼接，转到 node.js 服务去
			if (url.startsWith('/mock/')) {
				return this.prependBasename(url);
			}

			var restapi = this.restapi || context.restapi;
			return restapi + url;
		}

		/**
   * 封装重定向方法，根据 server/client 环境不同而选择不同的方式
   * isRaw 是否不拼接 Url，直接使用
   */

	}, {
		key: 'redirect',
		value: function redirect(redirectUrl, isRaw) {
			var history = this.history,
			    context = this.context;


			if (context.isServer) {
				if (!isRaw && !_util2.default.isAbsoluteUrl(redirectUrl)) {
					// 兼容 history.push，自动补全 basename
					redirectUrl = this.prependBasename(redirectUrl);
				}
				context.res.redirect(redirectUrl);
			} else if (context.isClient) {
				if (isRaw || _util2.default.isAbsoluteUrl(redirectUrl)) {
					window.location.replace(redirectUrl);
				} else {
					history.replace(redirectUrl);
				}
			}
		}
		// 封装 cookie 的同构方法

	}, {
		key: 'cookie',
		value: function cookie(key, value, options) {
			if (value == null) {
				return this.getCookie(key);
			}
			this.setCookie(key, value, options);
		}
	}, {
		key: 'getCookie',
		value: function getCookie(key) {
			var context = this.context;

			if (context.isServer) {
				var req = context.req;

				return req.cookies[key];
			} else if (context.isClient) {
				return _jsCookie2.default.get(key);
			}
		}
	}, {
		key: 'setCookie',
		value: function setCookie(key, value, options) {
			var context = this.context;


			if (options && options.expires) {
				var isDateInstance = options.expires instanceof Date;
				if (!isDateInstance) {
					throw new Error('cookie \u7684\u8FC7\u671F\u65F6\u95F4 expires \u5FC5\u987B\u4E3A Date \u7684\u5B9E\u4F8B\uFF0C\u800C\u4E0D\u662F ' + options.expires);
				}
			}

			if (context.isServer) {
				var res = context.res;

				res.cookie(key, value, options);
			} else if (context.isClient) {
				_jsCookie2.default.set(key, value, options);
			}
		}
	}, {
		key: 'removeCookie',
		value: function removeCookie(key, options) {
			var context = this.context;


			if (context.isServer) {
				var res = context.res;

				res.clearCookie(key, options);
			} else if (context.isClient) {
				_jsCookie2.default.remove(key, options);
			}
		}

		/**
   * 封装 fetch, https://github.github.io/fetch
   * options.json === false 不自动转换为 json
   * options.timeout:number 超时时间
   * options.raw 不补全 restfulBasename
   */

	}, {
		key: 'fetch',
		value: function (_fetch) {
			function fetch(_x) {
				return _fetch.apply(this, arguments);
			}

			fetch.toString = function () {
				return _fetch.toString();
			};

			return fetch;
		}(function (url) {
			var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
			var context = this.context,
			    API = this.API;

			/**
    * API shortcut，方便 fetch(name, options) 代替 url
    */

			if (API && Object.prototype.hasOwnProperty.call(API, url)) {
				url = API[url];
			}

			// 补全 url
			if (!options.raw) {
				url = this.prependRestapi(url);
			}

			var finalOptions = _extends({
				method: 'GET',
				credentials: 'include'
			}, options, {
				headers: _extends({
					'Content-Type': 'application/json'
				}, options.headers)
				/**
     * 浏览器端的 fetch 有 credentials: 'include'，会自动带上 cookie
     * 服务端得手动设置，可以从 context 对象里取 cookie
     */
			});if (context.isServer && finalOptions.credentials === 'include') {
				finalOptions.headers['Cookie'] = context.req.headers.cookie || '';
			}

			var fetchData = fetch(url, finalOptions);

			/**
    * 拓展字段，如果手动设置 options.json 为 false
    * 不自动 JSON.parse
    */
			if (options.json !== false) {
				fetchData = fetchData.then(_util2.default.toJSON);
			}

			/**
    * 设置自动化的超时处理
    */
			if (typeof options.timeout === 'number') {
				fetchData = _util2.default.timeoutReject(fetchData, options.timeout);
			}

			return fetchData;
		})
		/**
   *
   * 封装 get 请求，方便使用
   */

	}, {
		key: 'get',
		value: function get(url, params, options) {
			var API = this.API;
			/**
    * API shortcut，方便 fetch(name, options) 代替 url
    */

			if (API && Object.prototype.hasOwnProperty.call(API, url)) {
				url = API[url];
			}
			if (params) {
				var prefix = url.includes('?') ? '&' : '?';
				url += prefix + _querystring2.default.stringify(params);
			}
			options = _extends({}, options, {
				method: 'GET'
			});
			return this.fetch(url, options);
		}
		/**
   *
   * 封装 post 请求，方便使用
   */

	}, {
		key: 'post',
		value: function post(url, data, options) {
			options = _extends({}, options, {
				method: 'POST',
				body: JSON.stringify(data)
			});
			return this.fetch(url, options);
		}
		/**
   * 预加载 css 样式等资源
   */

	}, {
		key: 'fetchPreload',
		value: function fetchPreload(preload) {
			preload = preload || this.preload;
			var keys = Object.keys(preload);

			if (keys.length === 0) {
				return;
			}

			var context = this.context;

			var list = keys.map(function (name) {
				if (context.preload[name]) {
					return;
				}
				var url = preload[name];

				if (!_util2.default.isAbsoluteUrl(url)) {
					if (context.isServer) {
						// 在服务端应请求本地的资源
						url = context.serverPublicPath + url;
					} else if (context.isClient) {
						url = context.publicPath + url;
					}
				}

				return fetch(url).then(_util2.default.toText).then(function (content) {
					if (url.split('?')[0].indexOf('.css') !== -1) {
						/**
       * 如果是 CSS ，清空回车符
       * 否则同构渲染时 react 计算 checksum 值会不一致
       */
						content = content.replace(/\r+/g, '');
					}
					context.preload[name] = content;
				});
			});
			return Promise.all(list);
		}
	}, {
		key: 'init',
		value: function () {
			var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
				var Model, initialState, getInitialState, actions, context, location, SSR, Loading, View, $initialState, $actions, globalInitialState, finalInitialState, finalActions, promiseList, shouldCreate;
				return regeneratorRuntime.wrap(function _callee$(_context) {
					while (1) {
						switch (_context.prev = _context.next) {
							case 0:
								Model = this.Model, initialState = this.initialState, getInitialState = this.getInitialState, actions = this.actions, context = this.context, location = this.location, SSR = this.SSR, Loading = this.Loading;

								/**
         * 关闭 SSR 后，不执行 componentWillCreate 和 shouldComponentCreate，直接返回 Loading 界面
         * SSR 如果是个方法，则执行并等待它完成
         */

								if (!context.isServer) {
									_context.next = 9;
									break;
								}

								if (!(typeof this.SSR === 'function')) {
									_context.next = 6;
									break;
								}

								_context.next = 5;
								return this.SSR(location, context);

							case 5:
								SSR = _context.sent;

							case 6:
								if (!(SSR === false)) {
									_context.next = 9;
									break;
								}

								View = Loading || EmptyView;
								return _context.abrupt('return', _react2.default.createElement(View, null));

							case 9:

								// 在 init 方法里 bind this，这样 fetch 可以支持继承
								// 如果用 fetch = (url, option = {}) => {} 的写法，它不是原型方法，无法继承
								this.fetch = this.fetch.bind(this);

								// 如果 Model 存在，且 initialState 和 actions 不存在，从 Model 里解构出来
								if (Model && initialState === undefined && actions === undefined) {
									$initialState = Model.initialState, $actions = _objectWithoutProperties(Model, ['initialState']);

									initialState = this.initialState = $initialState;
									actions = this.actions = $actions;
								}

								globalInitialState = void 0;

								// 服务端把 initialState 吐在 html 里的全局变量 __INITIAL_STATE__ 里

								if (typeof __INITIAL_STATE__ !== 'undefined') {
									globalInitialState = __INITIAL_STATE__;
									__INITIAL_STATE__ = undefined;
								}

								if (typeof initialState === 'function') {
									initialState = initialState(location, context);
								}

								finalInitialState = _extends({}, initialState, globalInitialState, {
									location: location,
									isClient: context.isClient,
									isServer: context.isServer,
									basename: context.basename,
									publicPath: context.publicPath,
									restapi: context.restapi

									/**
          * 动态获取初始化的 initialState
          */
								});

								if (!(!globalInitialState && this.getInitialState)) {
									_context.next = 19;
									break;
								}

								_context.next = 18;
								return this.getInitialState(finalInitialState);

							case 18:
								finalInitialState = _context.sent;

							case 19:

								/**
         * 复用了 server side 的 state 数据之后执行
         */
								if (globalInitialState && this.stateDidReuse) {
									this.stateDidReuse(finalInitialState);
								}

								/**
         * 动态获取最终的 actions
         */
								if (this.getFinalActions) {
									actions = this.getFinalActions(actions);
								}

								/**
         * 创建 store
         */
								finalActions = _extends({}, actions, shareActions);

								this.store = (0, _relite.createStore)(finalActions, finalInitialState);
								(0, _attachDevToolsIfPossible2.default)(this.store);

								/**
         * 将 handle 开头的方法，合并到 this.handlers 中
         */
								this.combineHandlers(this);

								/**
         * 如果存在 globalInitialState
         * 说明服务端渲染了 html 和 intitialState
         * component 已经创建
         * 不需要再调用 shouldComponentCreate 和 componentWillCreate
         */

								if (!globalInitialState) {
									_context.next = 28;
									break;
								}

								this.bindStoreWithView();
								return _context.abrupt('return', this.render());

							case 28:
								promiseList = [];

								/**
         * 如果 shouldComponentCreate 返回 false，不创建和渲染 React Component
         * 可以在 shouldComponentCreate 里重定向到别的 Url
         */

								if (!this.shouldComponentCreate) {
									_context.next = 35;
									break;
								}

								_context.next = 32;
								return this.shouldComponentCreate();

							case 32:
								shouldCreate = _context.sent;

								if (!(shouldCreate === false)) {
									_context.next = 35;
									break;
								}

								return _context.abrupt('return', null);

							case 35:

								// 在 React Component 创建前调用，可以发 ajax 请求获取数据
								if (this.componentWillCreate) {
									promiseList.push(this.componentWillCreate());
								}

								/**
         * 获取预加载的资源
         */
								if (this.preload) {
									promiseList.push(this.fetchPreload());
								}

								if (!promiseList.length) {
									_context.next = 40;
									break;
								}

								_context.next = 40;
								return Promise.all(promiseList);

							case 40:

								this.bindStoreWithView();
								return _context.abrupt('return', this.render());

							case 42:
							case 'end':
								return _context.stop();
						}
					}
				}, _callee, this);
			}));

			function init() {
				return _ref.apply(this, arguments);
			}

			return init;
		}()
	}, {
		key: 'bindStoreWithView',
		value: function bindStoreWithView() {
			var _this2 = this;

			var context = this.context,
			    store = this.store,
			    location = this.location,
			    history = this.history,
			    meta = this.meta;

			// bind store with view in client

			if (!context.isClient || meta.isDestroyed) {
				return;
			}

			if (store) {
				var unsubscribe = store.subscribe(function (data) {
					_this2.refreshView();
					if (_this2.stateDidChange) {
						_this2.stateDidChange(data);
					}
				});
				meta.unsubscribeList.push(unsubscribe);
			}

			// 监听路由跳转
			if (this.pageWillLeave) {
				var unlisten = history.listenBefore(this.pageWillLeave.bind(this));
				meta.unsubscribeList.push(unlisten);
			}

			// 监听浏览器窗口关闭
			if (this.windowWillUnload) {
				var _unlisten = history.listenBeforeUnload(this.windowWillUnload.bind(this));
				meta.unsubscribeList.push(_unlisten);
			}
		}
	}, {
		key: 'destroy',
		value: function destroy() {
			var meta = this.meta;

			if (meta.unsubscribeList.length > 0) {
				meta.unsubscribeList.forEach(function (unsubscribe) {
					return unsubscribe();
				});
				meta.unsubscribeList.length = 0;
			}
			meta.isDestroyed = true;
		}
	}, {
		key: 'restore',
		value: function restore(location, context) {
			var meta = this.meta,
			    store = this.store;
			var __PAGE_DID_BACK__ = store.actions.__PAGE_DID_BACK__;


			meta.isDestroyed = false;
			__PAGE_DID_BACK__(location);

			if (this.pageDidBack) {
				this.pageDidBack(location, context);
			}

			this.bindStoreWithView();
			return this.render();
		}
	}, {
		key: 'reload',
		value: function reload() {
			this.history.replace(this.location.raw);
		}
	}, {
		key: 'render',
		value: function render() {
			var meta = this.meta,
			    View = this.View,
			    store = this.store,
			    handlers = this.handlers,
			    location = this.location,
			    history = this.history,
			    context = this.context,
			    handleInputChange = this.handleInputChange;

			var state = store.getState();
			var componentContext = {
				location: location,
				history: history,
				state: state,
				actions: store.actions,
				preload: context.preload,
				handleInputChange: handleInputChange,
				handlers: handlers
			};
			var currentKey = '[' + meta.id + ']' + location.raw;

			return _react2.default.createElement(
				_Root2.default,
				{ context: componentContext },
				_react2.default.createElement(_ViewManager2.default, {
					currentKey: currentKey,
					controller: this,
					View: View,
					state: state,
					handlers: handlers,
					actions: store.actions
				}),
				_react2.default.createElement(_ControllerProxy2.default, { key: currentKey, controller: this })
			);
		}
	}]);

	return Controller;
}();

exports.default = Controller;