"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }

exports.default = {
  toJSON: toJSON,
  toText: toText,
  timeoutReject: timeoutReject,
  isAbsoluteUrl: isAbsoluteUrl,
  mapValues: mapValues,
  isThenable: isThenable,
  setValueByPath: setValueByPath,
  getValueByPath: getValueByPath,
  getFlatList: getFlatList
};


function getFlatList(list) {
  var result = [];
  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    if (Array.isArray(item)) {
      result = result.concat(getFlatList(item));
    } else {
      result.push(item);
    }
  }
  return result;
}

function toJSON(response) {
  // 如果 response 状态异常，抛出错误
  if (!response.ok || response.status !== 200) {
    return Promise.reject(new Error(response.statusText));
  }
  return response.json();
}

function toText(response) {
  // 如果 response 状态异常，抛出错误
  if (!response.ok || response.status !== 200) {
    return Promise.reject(new Error(response.statusText));
  }
  return response.text();
}

function timeoutReject(promise) {
  var time = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

  var timeoutReject = new Promise(function (_, reject) {
    setTimeout(function () {
      return reject(new Error("Timeout Error:" + time + "ms"));
    }, time);
  });
  return Promise.race([promise, timeoutReject]);
}

function isAbsoluteUrl(url) {
  return url.indexOf("http") === 0 || url.indexOf("//") === 0;
}

function mapValues(obj, fn) {
  return Object.keys(obj).reduce(function (result, key) {
    result[key] = fn(obj[key], key);
    return result;
  }, {});
}

function isThenable(obj) {
  return obj != null && typeof obj.then === "function";
}

var path_separator_regexp = /\.|\/|:/;
var getPath = function getPath(path) {
  return !Array.isArray(path) ? path.split(path_separator_regexp) : path;
};

var setValue = function setValue(obj, _ref, value) {
  var _ref2 = _toArray(_ref),
      key = _ref2[0],
      rest = _ref2.slice(1);

  obj = Array.isArray(obj) ? obj.concat() : Object.assign({}, obj);
  obj[key] = rest.length > 0 ? setValue(obj[key], rest, value) : value;
  return obj;
};
function setValueByPath(obj, path, value) {
  return setValue(obj, getPath(path), value);
}

var getValue = function getValue(ret, key) {
  return ret[key];
};
function getValueByPath(obj, path) {
  return getPath(path).reduce(getValue, obj);
}