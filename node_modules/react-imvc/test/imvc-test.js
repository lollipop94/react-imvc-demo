"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var fetchContent = function () {
  var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(url) {
    var response, content;
    return regeneratorRuntime.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            _context8.next = 2;
            return (0, _nodeFetch2.default)(url);

          case 2:
            response = _context8.sent;
            _context8.next = 5;
            return response.text();

          case 5:
            content = _context8.sent;
            return _context8.abrupt("return", content);

          case 7:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8, this);
  }));

  return function fetchContent(_x) {
    return _ref8.apply(this, arguments);
  };
}();

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _expect = require("expect");

var _expect2 = _interopRequireDefault(_expect);

var _puppeteer = require("puppeteer");

var _puppeteer2 = _interopRequireDefault(_puppeteer);

var _nodeFetch = require("node-fetch");

var _nodeFetch2 = _interopRequireDefault(_nodeFetch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

process.env.NODE_ENV = "production";
var start = require("../start");
var PORT = 3333;
var ROOT = _path2.default.join(__dirname, "project");
var config = {
  root: ROOT, // 项目根目录
  port: PORT, // server 端口号
  logger: null, // 不出 log
  devtool: "", // 不出 source-map
  ReactViews: {
    beautify: false, // 不美化
    transformViews: false // 已有转换，无须再做
  },
  routes: "routes", // 服务端路由目录
  layout: "Layout", // 自定义 Layout
  codeSpliting: true, // 开启代码切割
  webpackLogger: false, // 关闭 webpack logger
  webpackDevMiddleware: true // 在内存里编译
};

describe("React-IMVC", function () {
  describe("Enable SSR", function () {
    mainTest(_extends({}, config, {
      port: PORT++,
      SSR: true
    }));
  });
  describe("Disable SSR", function () {
    mainTest(_extends({}, config, {
      port: PORT++,
      SSR: false
    }));
  });
});

function mainTest(config) {
  var _this = this;

  var app = void 0,
      server = void 0,
      browser = void 0;

  before(_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var result;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return start({ config: config });

          case 2:
            result = _context.sent;

            app = result.app;
            server = result.server;
            _context.next = 7;
            return _puppeteer2.default.launch();

          case 7:
            browser = _context.sent;

          case 8:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, _this);
  })));

  after(function () {
    browser.close();
    server.close();
  });

  describe("static view", function () {
    var renderCondition = config.SSR ? "render" : "NOT render";
    it("should " + renderCondition + " view in server side", _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
      var page, url, serverContent, clientContent;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return browser.newPage();

            case 2:
              page = _context2.sent;
              url = "http://localhost:" + config.port + "/static_view";
              _context2.next = 6;
              return page.goto(url);

            case 6:
              _context2.next = 8;
              return page.waitFor("#static_view");

            case 8:
              _context2.next = 10;
              return fetchContent(url);

            case 10:
              serverContent = _context2.sent;
              _context2.next = 13;
              return page.evaluate(function () {
                return document.documentElement.outerHTML;
              });

            case 13:
              clientContent = _context2.sent;

              (0, _expect2.default)(serverContent.includes("static view content")).toBe(config.SSR ? true : false);
              (0, _expect2.default)(clientContent.includes("static view content")).toBe(true);

              _context2.next = 18;
              return page.close();

            case 18:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, _this);
    })));

    it("should not render view in server side when controller.SSR is false", _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
      var page, url, serverContent, clientContent;
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return browser.newPage();

            case 2:
              page = _context3.sent;
              url = "http://localhost:" + config.port + "/static_view_csr";
              _context3.next = 6;
              return page.goto(url);

            case 6:
              _context3.next = 8;
              return page.waitFor("#static_view_csr");

            case 8:
              _context3.next = 10;
              return fetchContent(url);

            case 10:
              serverContent = _context3.sent;
              _context3.next = 13;
              return page.evaluate(function () {
                return document.documentElement.outerHTML;
              });

            case 13:
              clientContent = _context3.sent;

              (0, _expect2.default)(serverContent.includes("static view content by client side rendering")).toBe(false);
              (0, _expect2.default)(clientContent.includes("static view content by client side rendering")).toBe(true);

              _context3.next = 18;
              return page.close();

            case 18:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, _this);
    })));
  });

  describe("server side", function () {
    it("should pass server and app instance to every route handler", function () {
      (0, _expect2.default)(app.isTouched).toBe(true);
      (0, _expect2.default)(server.isTouched).toBe(true);
    });

    it("should support custom server router", _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
      var url, response, json;
      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              url = "http://localhost:" + config.port + "/my_router";
              _context4.next = 3;
              return (0, _nodeFetch2.default)(url);

            case 3:
              response = _context4.sent;
              _context4.next = 6;
              return response.json();

            case 6:
              json = _context4.sent;

              (0, _expect2.default)(json).toBeA("object");
              (0, _expect2.default)(json.ok).toBe(true);

            case 9:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, _this);
    })));

    it("should support render custom layout", _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
      var page, url, serverContent, __CUSTOM_LAYOUT__;

      return regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return browser.newPage();

            case 2:
              page = _context5.sent;
              url = "http://localhost:" + config.port + "/static_view";
              _context5.next = 6;
              return page.goto(url);

            case 6:
              _context5.next = 8;
              return page.waitFor("#static_view");

            case 8:
              _context5.next = 10;
              return fetchContent(url);

            case 10:
              serverContent = _context5.sent;
              _context5.next = 13;
              return page.evaluate(function () {
                return window.__CUSTOM_LAYOUT__;
              });

            case 13:
              __CUSTOM_LAYOUT__ = _context5.sent;


              (0, _expect2.default)(serverContent.includes("window.__CUSTOM_LAYOUT__")).toBe(true);
              (0, _expect2.default)(__CUSTOM_LAYOUT__).toBe(true);
              _context5.next = 18;
              return page.close();

            case 18:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, _this);
    })));

    var responseStatus = config.SSR ? 404 : 200;
    it("should respond " + responseStatus + " status code when url is not match", _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
      var url, response;
      return regeneratorRuntime.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              url = "http://localhost:" + config.port + "/a_path_which_is_not match";
              _context6.next = 3;
              return (0, _nodeFetch2.default)(url);

            case 3:
              response = _context6.sent;

              (0, _expect2.default)(response.status).toBe(responseStatus);

            case 5:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, _this);
    })));
  });

  describe('controller', function () {
    it('should have location and context properties in controller instance both server side and client side', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
      var url, page, clientController, serverController, locationKeys, contextKeys, location, context;
      return regeneratorRuntime.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              url = "http://localhost:" + config.port + "/basic_state?a=1&b=2";
              _context7.next = 3;
              return browser.newPage();

            case 3:
              page = _context7.sent;
              _context7.next = 6;
              return page.goto(url);

            case 6:
              _context7.next = 8;
              return page.waitFor('#basic_state');

            case 8:
              _context7.next = 10;
              return page.evaluate(function () {
                return window.controller;
              });

            case 10:
              clientController = _context7.sent;


              if (config.SSR) {
                serverController = global.controller;
                locationKeys = ['params', 'query', 'pathname', 'pattern', 'search', 'raw'];

                locationKeys.forEach(function (key) {
                  (0, _expect2.default)(JSON.stringify(serverController.location[key])).toEqual(JSON.stringify(clientController.location[key]));
                });

                contextKeys = ['basename', 'publicPath', 'restapi'];

                contextKeys.forEach(function (key) {
                  (0, _expect2.default)(JSON.stringify(serverController.context[key])).toEqual(JSON.stringify(clientController.context[key]));
                });

                (0, _expect2.default)(serverController.context.req).toBeA('object');
                (0, _expect2.default)(serverController.context.res).toBeA('object');
                (0, _expect2.default)(serverController.context.isClient).toBe(false);
                (0, _expect2.default)(serverController.context.isServer).toBe(true);

                (0, _expect2.default)(clientController.context.isClient).toBe(true);
                (0, _expect2.default)(clientController.context.isServer).toBe(false);
              }

              location = clientController.location, context = clientController.context;


              (0, _expect2.default)(location.pattern).toEqual('/basic_state');
              (0, _expect2.default)(location.pathname).toEqual('/basic_state');
              (0, _expect2.default)(location.raw).toEqual('/basic_state?a=1&b=2');
              (0, _expect2.default)(location.search).toEqual('?a=1&b=2');
              (0, _expect2.default)(location.query).toEqual({ a: '1', b: '2' });
              (0, _expect2.default)(location.params).toEqual({});

              _context7.next = 21;
              return page.close();

            case 21:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, _this);
    })));

    // it('should share history and context properties in all controller instances', async () => {
    //   let url = `http://localhost:${config.port}/basic_state?a=1&b=2`;
    //   let page = await browser.newPage();

    //   await page.goto(url)
    //   await page.waitFor('#basic_state')

    //   let clientController = await page.evaluate(() => window.controller)

    //   expect(clientController.history).toBeA('object')

    //   await page.evaluate(() => window.controller.history.push('/static_view?a=1&b=2'))
    //   await page.waitFor('#static_view')

    //   let clientLocation = await page.evaluate(() => window.location)
    //   expect(clientLocation.pathanme).toEqual('/static_view')
    //   expect(clientLocation.search).toEqual('?a=1&b=2')

    //   await page.goBack()
    //   await page.waitFor('#basic_state')

    //   let newClientController = await page.evaluate(() => window.controller)
    //   expect(newClientController === clientController).toBe(false)
    //   expect(newClientController.history === clientController.history).toBe(true) // share the same history property
    //   expect(newClientController.context === clientController.context).toBe(true) // share the same context property

    //   await page.goForward()
    //   await page.waitFor('#static_view')

    //   clientLocation = await page.evaluate(() => window.location)
    //   console.log('location', clientLocation)
    //   expect(clientLocation.pathanme).toEqual('/static_view')
    //   expect(clientLocation.search).toEqual('?a=1&b=2')

    //   await page.close()
    // })
  });
}