'use strict';

var _expect = require('expect');

var _expect2 = _interopRequireDefault(_expect);

var _util = require('../util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

describe('util', function () {

    describe('getFlatList', function () {
        it('should make a nest list flat', function () {
            var nestList = [1, 2, [3, 4, [5, 6, [7, 8]]]];
            var flatList = _util2.default.getFlatList(nestList);
            (0, _expect2.default)(flatList).toEqual([1, 2, 3, 4, 5, 6, 7, 8]);
        });
    });

    describe('timeoutReject', function () {
        it('should reject when timeout', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
            var resolveAfter10ms, count;
            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            resolveAfter10ms = new Promise(function (resolve) {
                                return setTimeout(resolve, 10);
                            });
                            count = 0;
                            _context.prev = 2;
                            _context.next = 5;
                            return _util2.default.timeoutReject(resolveAfter10ms, 5);

                        case 5:
                            _context.next = 11;
                            break;

                        case 7:
                            _context.prev = 7;
                            _context.t0 = _context['catch'](2);

                            (0, _expect2.default)(_context.t0.message.startsWith('Timeout Error'));
                            count += 1;

                        case 11:
                            (0, _expect2.default)(count).toBe(1);

                        case 12:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, undefined, [[2, 7]]);
        })));

        it('should not reject when it is not timeout', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
            var resolveAfter5ms, count;
            return regeneratorRuntime.wrap(function _callee2$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            resolveAfter5ms = new Promise(function (resolve) {
                                return setTimeout(resolve, 5);
                            });
                            count = 0;
                            _context2.prev = 2;
                            _context2.next = 5;
                            return _util2.default.timeoutReject(resolveAfter5ms, 10);

                        case 5:
                            _context2.next = 10;
                            break;

                        case 7:
                            _context2.prev = 7;
                            _context2.t0 = _context2['catch'](2);

                            count += 1;

                        case 10:
                            (0, _expect2.default)(count).toBe(0);

                        case 11:
                        case 'end':
                            return _context2.stop();
                    }
                }
            }, _callee2, undefined, [[2, 7]]);
        })));
    });

    describe('getValueByPath', function () {

        it('should support get value by path', function () {
            var obj = {
                a: {
                    b: {
                        c: {
                            d: 1
                        }
                    }
                },
                f: 2
            };
            var value = _util2.default.getValueByPath(obj, 'a.b.c.d');
            (0, _expect2.default)(value).toEqual(obj.a.b.c.d);
            (0, _expect2.default)(value).toEqual(1);
            (0, _expect2.default)(_util2.default.getValueByPath(obj, 'f')).toEqual(2);
        });

        it('should support get value from array', function () {
            var obj = {
                a: {
                    b: {
                        c: [1, 2, {
                            d: 4
                        }]
                    }
                }
            };
            var value = _util2.default.getValueByPath(obj, 'a.b.c.2.d');
            (0, _expect2.default)(value).toEqual(4);
        });

        it('should support three separators', function () {
            var obj = {
                a: {
                    b: {
                        c: {
                            d: 1
                        }
                    },
                    f: [{
                        a: 1
                    }, {
                        a: 2
                    }, {
                        a: 3
                    }]
                }
            };

            var path1 = ['a', 'b', 'c', 'd'];
            (0, _expect2.default)(_util2.default.getValueByPath(obj, path1.join('.'))).toEqual(1);
            (0, _expect2.default)(_util2.default.getValueByPath(obj, path1.join(':'))).toEqual(1);
            (0, _expect2.default)(_util2.default.getValueByPath(obj, path1.join('/'))).toEqual(1);

            var path2 = ['a', 'f', '2', 'a'];
            (0, _expect2.default)(_util2.default.getValueByPath(obj, path2.join('.'))).toEqual(3);
            (0, _expect2.default)(_util2.default.getValueByPath(obj, path2.join(':'))).toEqual(3);
            (0, _expect2.default)(_util2.default.getValueByPath(obj, path2.join('/'))).toEqual(3);
        });

        it('should throw error when path is not valid', function () {
            var obj = {
                a: 1
            };
            (0, _expect2.default)(function () {
                return _util2.default.getValueByPath(obj, 'obj.b.c');
            }).toThrow();
        });

        it('should return undefined when path is valid and the last key is not exist', function () {
            var obj = {
                a: 1,
                b: {
                    c: 1
                }
            };
            (0, _expect2.default)(_util2.default.getValueByPath(obj, 'd')).toEqual(undefined);
            (0, _expect2.default)(_util2.default.getValueByPath(obj, 'b.d')).toEqual(undefined);
        });
    });

    describe('setValueByPath', function () {

        it('should set value by path without changing source data', function () {
            var obj = {
                a: {
                    b: {
                        c: 1
                    }
                },
                f: 2
            };
            var obj1 = _util2.default.setValueByPath(obj, 'a.b.c', 2);
            var obj2 = _util2.default.setValueByPath(obj1, 'f', 3);

            (0, _expect2.default)(obj === obj1).toBe(false);
            (0, _expect2.default)(obj1 === obj2).toBe(false);
            (0, _expect2.default)(obj === obj2).toBe(false);
            (0, _expect2.default)(obj.a.b.c).toEqual(1);
            (0, _expect2.default)(obj1.a.b.c).toEqual(2);
            (0, _expect2.default)(obj2.a.b.c).toEqual(2);
            (0, _expect2.default)(obj.f).toEqual(2);
            (0, _expect2.default)(obj1.f).toEqual(2);
            (0, _expect2.default)(obj2.f).toEqual(3);
        });

        it('should share the same data when update value', function () {
            var obj = {
                a: {
                    value: 1
                },
                b: {
                    value: 2
                },
                c: {
                    value: 3
                }
            };
            var obj1 = _util2.default.setValueByPath(obj, 'a.value', 0);

            (0, _expect2.default)(obj.a === obj1.a).toBe(false);
            (0, _expect2.default)(obj.b === obj1.b).toBe(true);
            (0, _expect2.default)(obj.c === obj1.c).toBe(true);
            (0, _expect2.default)(obj.a.value).toEqual(1);
            (0, _expect2.default)(obj1.a.value).toEqual(0);
        });

        it('should support update array', function () {
            var obj = {
                list: [{
                    value: 1
                }, {
                    value: 2
                }, {
                    value: 3
                }]
            };

            var obj1 = _util2.default.setValueByPath(obj, 'list.2.value', 0);

            (0, _expect2.default)(obj.list[0] === obj1.list[0]).toBe(true);
            (0, _expect2.default)(obj.list[1] === obj1.list[1]).toBe(true);
            (0, _expect2.default)(obj.list[2] === obj1.list[2]).toBe(false);
            (0, _expect2.default)(obj.list === obj1.list).toBe(false);
            (0, _expect2.default)(obj.list[2].value).toEqual(3);
            (0, _expect2.default)(obj1.list[2].value).toEqual(0);
        });

        it('should support three separators', function () {
            var obj = {
                list: [{
                    value: 1
                }, {
                    value: 2
                }, {
                    value: 3
                }]
            };

            var obj1 = _util2.default.setValueByPath(obj, 'list.2.value', 0);
            var obj2 = _util2.default.setValueByPath(obj, 'list/2/value', 0);
            var obj3 = _util2.default.setValueByPath(obj, 'list:2:value', 0);

            (0, _expect2.default)(obj1).toEqual(obj2);
            (0, _expect2.default)(obj1).toEqual(obj3);
            (0, _expect2.default)(obj2).toEqual(obj3);
            (0, _expect2.default)(obj).toNotEqual(obj1);
        });
    });
});