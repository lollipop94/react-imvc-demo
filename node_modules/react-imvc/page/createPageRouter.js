"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = createPageRouter;

var _express = require("express");

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _server = require("react-dom/server");

var _server2 = _interopRequireDefault(_server);

var _server3 = require("create-app/lib/server");

var _server4 = _interopRequireDefault(_server3);

var _util = require("../util");

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var getFlatList = _util2.default.getFlatList;

var commonjsLoader = function commonjsLoader(module) {
  return module.default || module;
};

function createPageRouter(options) {
  var _this = this;

  var config = Object.assign({}, options);
  var routes = require(_path2.default.join(config.root, config.src));

  routes = routes.default || routes;
  if (!Array.isArray(routes)) {
    routes = Object.values(routes);
  }
  routes = getFlatList(routes);

  var router = (0, _express.Router)();
  var serverAppSettings = {
    loader: commonjsLoader,
    routes: routes,
    viewEngine: {
      render: _server2.default[config.renderMode]
    }
  };

  var app = (0, _server4.default)(serverAppSettings);
  var layoutView = config.layout || _path2.default.join(__dirname, "view");

  // 纯浏览器端渲染模式，用前置中间件拦截所有请求
  if (config.SSR === false) {
    router.all("*", function (req, res) {
      res.render(layoutView);
    });
  } else if (config.NODE_ENV === "development") {
    // 带服务端渲染模式的开发环境，需要动态编译 src/routes
    var setupDevEnv = require("../build/setup-dev-env");
    setupDevEnv.setupServer(config, {
      handleHotModule: function handleHotModule($routes) {
        var routes = getFlatList(Array.isArray($routes) ? $routes : Object.values($routes));
        app = (0, _server4.default)(_extends({}, serverAppSettings, {
          routes: routes
        }));
      }
    });
  }

  // handle page
  router.all("*", function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(req, res, next) {
      var basename, serverPublicPath, publicPath, context, _ref2, content, controller, initialState, htmlConfigs, data;

      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              basename = req.basename, serverPublicPath = req.serverPublicPath, publicPath = req.publicPath;
              context = _extends({
                basename: basename,
                serverPublicPath: serverPublicPath,
                publicPath: publicPath,
                restapi: config.serverRestapi || config.restapi || ""
              }, config.context, {
                preload: {},
                isServer: true,
                isClient: false,
                req: req,
                res: res
              });
              _context.prev = 2;
              _context.next = 5;
              return app.render(req.url, context);

            case 5:
              _ref2 = _context.sent;
              content = _ref2.content;
              controller = _ref2.controller;

              if (content) {
                _context.next = 10;
                break;
              }

              return _context.abrupt("return");

            case 10:
              initialState = controller.store ? controller.store.getState() : undefined;
              htmlConfigs = initialState ? initialState.html : undefined;
              data = _extends({}, htmlConfigs, {
                content: content,
                initialState: initialState
              });

              // 支持通过 res.locals.layoutView 动态确定 layoutView

              res.render(res.locals.layoutView || layoutView, data);
              _context.next = 19;
              break;

            case 16:
              _context.prev = 16;
              _context.t0 = _context["catch"](2);

              next(_context.t0);

            case 19:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, _this, [[2, 16]]);
    }));

    return function (_x, _x2, _x3) {
      return _ref.apply(this, arguments);
    };
  }());

  return router;
}