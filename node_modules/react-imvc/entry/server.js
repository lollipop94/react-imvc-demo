'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = createExpressApp;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _express = require('express');

var _express2 = _interopRequireDefault(_express);

var _compression = require('compression');

var _compression2 = _interopRequireDefault(_compression);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _morgan = require('morgan');

var _morgan2 = _interopRequireDefault(_morgan);

var _cookieParser = require('cookie-parser');

var _cookieParser2 = _interopRequireDefault(_cookieParser);

var _bodyParser = require('body-parser');

var _bodyParser2 = _interopRequireDefault(_bodyParser);

var _serveFavicon = require('serve-favicon');

var _serveFavicon2 = _interopRequireDefault(_serveFavicon);

var _helmet = require('helmet');

var _helmet2 = _interopRequireDefault(_helmet);

var _expressReactViews = require('express-react-views');

var _expressReactViews2 = _interopRequireDefault(_expressReactViews);

var _shareRoot = require('../middleware/shareRoot');

var _shareRoot2 = _interopRequireDefault(_shareRoot);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function createExpressApp(config) {
	var app = (0, _express2.default)();

	// handle basename
	var list = Array.isArray(config.basename) ? config.basename : [config.basename || ''];
	list.forEach(function (basename) {
		app.use((0, _shareRoot2.default)(basename));
	});

	// handle helmet
	if (config.helmet) {
		app.use((0, _helmet2.default)(config.helmet));
	}

	// handle compression
	if (config.compression) {
		app.use((0, _compression2.default)(config.compression));
	}

	// handle favicon
	if (config.favicon) {
		app.use((0, _serveFavicon2.default)(config.favicon));
	}

	// handle view engine
	app.engine('js', _expressReactViews2.default.createEngine(config.ReactViews));

	// view engine setup
	app.set('views', _path2.default.join(config.root, config.routes));
	app.set('view engine', 'js');

	// handle logger
	if (config.logger) {
		app.use((0, _morgan2.default)(config.logger));
	}

	// handle bodyParser
	if (config.bodyParser) {
		if (config.bodyParser.json) {
			app.use(_bodyParser2.default.json(config.bodyParser.json));
		}

		if (config.bodyParser.urlencoded) {
			app.use(_bodyParser2.default.urlencoded(config.bodyParser.urlencoded));
		}
	}

	// handle cookieParser
	if (config.cookieParser) {
		app.use((0, _cookieParser2.default)(config.cookieParser));
	}

	app.use('/mock', function (req, res, next) {
		var filePath = _path2.default.join(config.root, config.src, req.path + '.json');
		res.type('application/json');
		_fs2.default.createReadStream(filePath).pipe(res);
	});

	app.get('/slbhealthcheck.html', function (req, res) {
		res.send('slbhealthcheck ok');
	});

	if (config.webpackDevMiddleware) {
		// 开发模式用 webpack-dev-middleware 代理 js 文件
		var setupDevEnv = require('../build/setup-dev-env');

		var _setupDevEnv$setupCli = setupDevEnv.setupClient(config),
		    compiler = _setupDevEnv$setupCli.compiler,
		    middleware = _setupDevEnv$setupCli.middleware;

		app.use(middleware);

		// 添加热更新中间件
		if (config.hot) {
			var webpackHotMiddleware = require('webpack-hot-middleware');
			app.use(webpackHotMiddleware(compiler, _defineProperty({
				quiet: true,
				noInfo: true,
				log: false
			}, 'noInfo', true)));
		}

		// 开发模式里，用 src 里的静态资源
		app.use(config.staticPath, _express2.default.static(_path2.default.join(config.root, config.src)));

		// 开发模式用 webpack-dev-middleware 获取 assets
		app.use(function (req, res, next) {
			res.locals.assets = getAssets(res.locals.webpackStats.toJson().assetsByChunkName);
			next();
		});
	} else {
		// publish 目录启动
		app.use(config.staticPath, _express2.default.static(_path2.default.join(config.root, config.static), config.staticOptions));

		// 在根目录启动
		app.use(config.staticPath, _express2.default.static(_path2.default.join(config.root, config.publish, config.static), config.staticOptions));

		var assets = readAssets(config);
		app.use(function (req, res, next) {
			res.locals.assets = assets;
			next();
		});
	}

	// handle publicPath and default props
	app.use(function (req, res, next) {
		var basename = req.basename; // from shareRoot
		var serverPublicPath = basename + config.staticPath;
		var publicPath = config.publicPath || serverPublicPath;
		var defaultProps = _extends({}, config, {
			basename: basename,
			publicPath: publicPath,
			serverPublicPath: serverPublicPath
		});
		Object.assign(res.locals, defaultProps);
		req.serverPublicPath = serverPublicPath;
		req.publicPath = publicPath;
		next();
	});

	// attach appSettings for client
	app.use(function (req, res, next) {
		var basename = req.basename,
		    publicPath = req.publicPath;

		var context = _extends({
			basename: basename,
			publicPath: publicPath,
			restapi: config.restapi
		}, config.context, {
			preload: {}
		});

		res.locals.appSettings = _extends({
			type: 'createHistory',
			basename: basename,
			context: context
		}, config.appSettings);

		next();
	});

	return app;
}

function getAssets(stats) {
	return Object.keys(stats).reduce(function (result, assetName) {
		var value = stats[assetName];
		result[assetName] = Array.isArray(value) ? value[0] : value;
		return result;
	}, {});
}

function readAssets(config) {
	var result = void 0;
	// 生产模式直接用编译好的资源表
	var assetsPathList = [
	// 在 publish 目录下启动
	_path2.default.join(config.root, config.static, config.assetsPath),
	// 在项目根目录下启动
	_path2.default.join(config.root, config.publish, config.static, config.assetsPath)];

	while (assetsPathList.length) {
		try {
			result = require(assetsPathList.shift());
		} catch (error) {
			// ignore error
		}
	}

	if (!result) {
		throw new Error('找不到 webpack 资源表 assets.json');
	}

	return getAssets(result);
}