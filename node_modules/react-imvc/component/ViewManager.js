"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ViewManager = function (_React$Component) {
  _inherits(ViewManager, _React$Component);

  function ViewManager(props, context) {
    _classCallCheck(this, ViewManager);

    var _this = _possibleConstructorReturn(this, (ViewManager.__proto__ || Object.getPrototypeOf(ViewManager)).call(this, props, context));

    _this.views = {};
    _this.scrollMap = {};

    _this.addItemIfNeed(props);
    return _this;
  }

  _createClass(ViewManager, [{
    key: "addItemIfNeed",
    value: function addItemIfNeed(props) {
      var path = props.state.location.raw;
      if (!this.views.hasOwnProperty(path)) {
        this.views[path] = null;
      }
    }
  }, {
    key: "clearItemIfNeed",
    value: function clearItemIfNeed() {
      var views = this.views,
          scrollMap = this.scrollMap;
      var controller = this.props.controller;

      var cache = controller.getAllCache();

      for (var key in views) {
        if (!cache.hasOwnProperty(key)) {
          delete views[key];
        }
      }

      for (var _key in scrollMap) {
        if (!cache.hasOwnProperty(_key)) {
          delete scrollMap[_key];
        }
      }
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.state.location !== nextProps.state.location) {
        this.scrollMap[this.props.state.location.raw] = window.scrollY;
      }
      this.addItemIfNeed(nextProps);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this.clearItemIfNeed();
    }
  }, {
    key: "renderView",
    value: function renderView(path) {
      var _props = this.props,
          View = _props.View,
          state = _props.state,
          handlers = _props.handlers,
          actions = _props.actions,
          controller = _props.controller,
          currentKey = _props.currentKey;

      var isActive = state.location.raw === path;

      if (isActive) {
        var view = _react2.default.createElement(View, { key: currentKey, state: state, handlers: handlers, actions: actions });
        if (controller.KeepAlive) {
          this.views[path] = view;
        } else if (this.views.hasOwnProperty(path)) {
          delete this.views[path];
        }
        return view;
      } else {
        return this.views[path];
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var state = this.props.state;

      return _react2.default.createElement(
        "div",
        { className: "imvc-view-manager" },
        Object.keys(this.views).map(function (path) {
          return _react2.default.createElement(ViewItem, {
            key: path,
            path: path,
            isActive: path === state.location.raw,
            view: _this2.renderView(path),
            scrollY: _this2.scrollMap[path]
          });
        })
      );
    }
  }]);

  return ViewManager;
}(_react2.default.Component);

exports.default = ViewManager;

var ViewItem = function (_React$Component2) {
  _inherits(ViewItem, _React$Component2);

  function ViewItem() {
    var _ref;

    var _temp, _this3, _ret;

    _classCallCheck(this, ViewItem);

    for (var _len = arguments.length, args = Array(_len), _key2 = 0; _key2 < _len; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return _ret = (_temp = (_this3 = _possibleConstructorReturn(this, (_ref = ViewItem.__proto__ || Object.getPrototypeOf(ViewItem)).call.apply(_ref, [this].concat(args))), _this3), _this3.getContainer = function (container) {
      _this3.container = container;
    }, _temp), _possibleConstructorReturn(_this3, _ret);
  }

  _createClass(ViewItem, [{
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps) {
      if (!nextProps.isActive) {
        this.container.style.display = 'none';
      } else {
        if (!this.props.isActive) {
          this.container.style.display = '';
          window.scroll(0, this.props.scrollY);
        }
      }
      return nextProps.isActive;
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      window.scroll(0, 0);
    }
  }, {
    key: "render",
    value: function render() {
      return _react2.default.createElement(
        "div",
        { className: "imvc-view-item", ref: this.getContainer, "data-path": this.props.path },
        this.props.view
      );
    }
  }]);

  return ViewItem;
}(_react2.default.Component);