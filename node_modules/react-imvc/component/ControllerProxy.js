'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * ViewProxy 把 react 组件生命周期同步到 controller 里
 * 根据 state 更新 document.title
 */
var ControllerProxy = function (_React$Component) {
	_inherits(ControllerProxy, _React$Component);

	function ControllerProxy() {
		_classCallCheck(this, ControllerProxy);

		return _possibleConstructorReturn(this, (ControllerProxy.__proto__ || Object.getPrototypeOf(ControllerProxy)).apply(this, arguments));
	}

	_createClass(ControllerProxy, [{
		key: 'updateDocumentTitle',
		value: function updateDocumentTitle() {
			var controller = this.props.controller;

			var _controller$store$get = controller.store.getState(),
			    html = _controller$store$get.html;

			if (html && html.title !== document.title) {
				document.title = html.title;
			}
		}
	}, {
		key: 'emit',
		value: function emit(method) {
			var controller = this.props.controller;

			if (typeof controller[method] === 'function') {
				controller[method]();
			}
		}
	}, {
		key: 'componentDidMount',
		value: function componentDidMount() {
			var controller = this.props.controller;

			this.updateDocumentTitle();
			if (!controller.meta.hadMounted) {
				controller.meta.hadMounted = true;
				this.emit('componentDidFirstMount');
			}
			this.emit('componentDidMount');
		}
	}, {
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			this.emit('componentWillUnmount');
		}
	}, {
		key: 'componentDidUpdate',
		value: function componentDidUpdate() {
			this.updateDocumentTitle();
		}
	}, {
		key: 'render',
		value: function render() {
			return null;
		}
	}]);

	return ControllerProxy;
}(_react2.default.Component);

exports.default = ControllerProxy;