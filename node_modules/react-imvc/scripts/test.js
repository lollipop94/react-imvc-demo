'use strict';

process.env.BABEL_ENV = 'test';
process.env.NODE_ENV = 'test';

// Makes the script crash on unhandled rejections instead of silently
// ignoring them. In the future, promise rejections that are not handled will
// terminate the Node.js process with a non-zero exit code.
process.on('unhandledRejection', function (error) {
	throw error;
});

require('babel-polyfill');
require('babel-register');

var Mocha = require('mocha');
var fs = require('fs');
var path = require('path');
var options = require('yargs').argv;

// Instantiate a Mocha instance.
var mocha = new Mocha(options);

function travelDirectoryToAddTestFiles(dir) {
	fs.readdirSync(dir).forEach(function (file) {
		var filename = path.join(dir, file);
		// ignore node_modules
		if (filename.indexOf('node_modules') !== -1) {
			return;
		}
		// read file deeply
		if (fs.statSync(filename).isDirectory()) {
			return travelDirectoryToAddTestFiles(filename);
		}
		// add *test.js file to the mocha instance
		if (filename.substr(-8) === '-test.js') {
			return mocha.addFile(filename);
		}
	});
}

travelDirectoryToAddTestFiles(process.cwd());

// Run the tests.
mocha.run(function (failures) {
	process.on('exit', function () {
		process.exit(failures); // exit with non-zero status if there were failures
	});
});