#!/usr/bin/env node
'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var querystring = require('query-string');
var spawn = require('cross-spawn');
var command = process.argv[2];
var args = process.argv.slice(3);

var _command$split = command.split('?'),
    _command$split2 = _slicedToArray(_command$split, 2),
    script = _command$split2[0],
    _command$split2$ = _command$split2[1],
    params = _command$split2$ === undefined ? '' : _command$split2$;

var query = querystring.parse(params);
var params = Object.keys(query).map(function (key) {
  return query[key] ? '--' + key + '=' + query[key] : '--' + key;
});
var result;

switch (script) {
  case 'build':
  case 'start':
  case 'test':
    result = spawn.sync('node', params.concat(require.resolve('../scripts/' + script), args), {
      stdio: 'inherit'
    });
    break;
  default:
    console.log('Unknown script "' + script + '".');
    break;
}

if (result) {
  switch (result.signal) {
    case 'SIGKILL':
      console.log('The build failed because the process exited too early. ' + 'This probably means the system ran out of memory or someone called ' + '`kill -9` on the process.');
      process.exit(1);
      break;
    case 'SIGTERM':
      console.log('The build failed because the process exited too early. ' + 'Someone might have called `kill` or `killall`, or the system could ' + 'be shutting down.');
      process.exit(1);
      break;
  }
  process.exit(result.status);
}